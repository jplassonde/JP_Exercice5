FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 07 4E LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 06 31 LJMP  _Counter16_ISR     (0153)     ljmp	_Counter16_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 02 E5 LJMP  _SleepTimer_ISR    (0185)     ljmp	_SleepTimer_ISR
0067: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 36    MOV   A,0x36             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [_ramareas_end+194],0x0(0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+195],0x0(0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 1A MOV   REG[0xE0],0x1A     (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 7B LCALL 0x027B             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 0A 16 MOV   [__r0],0x16        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 0A 36 CMP   [__r0],0x36        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 0A    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 B6    MOV   X,0xB6             (0368)     mov  X,<__idata_start
00AC: 55 0A 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 0A 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 0A    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 18 MOV   REG[0xE0],0x18     (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 06 94 LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
01B6: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_jp_exercice5_Bank1
                                        (0019) export LoadConfigTBL_jp_exercice5_Bank0
                                        (0020) export LoadConfigTBL_jp_exercice5_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_jp_exercice5_Bank0:
                                        (0023) ;  Instance name Counter16, User Module Counter16
                                        (0024) ;       Instance name Counter16, Block Name CNTR16_LSB(DBB00)
                                        (0025) 	db		23h, 00h		;Counter16_CONTROL_LSB_REG(DBB00CR0)
                                        (0026) 	db		21h, ffh		;Counter16_PERIOD_LSB_REG(DBB00DR1)
                                        (0027) 	db		22h, 00h		;Counter16_COMPARE_LSB_REG(DBB00DR2)
                                        (0028) ;       Instance name Counter16, Block Name CNTR16_MSB(DBB01)
                                        (0029) 	db		27h, 00h		;Counter16_CONTROL_MSB_REG(DBB01CR0)
                                        (0030) 	db		25h, ffh		;Counter16_PERIOD_MSB_REG(DBB01DR1)
                                        (0031) 	db		26h, 00h		;Counter16_COMPARE_MSB_REG(DBB01DR2)
                                        (0032) ;  Instance name LCD, User Module LCD
                                        (0033) ;  Instance name P0_SHADOW, User Module SHADOWREGS
                                        (0034) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0035) ;  Global Register values Bank 0
                                        (0036) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0037) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0038) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0039) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0040) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0041) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0042) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0043) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0044) 	db		b1h, 02h		; Row_0_InputSync register (RDI0SYN)
                                        (0045) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0046) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0047) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0048) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0049) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0050) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0051) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0052) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0053) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0054) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0055) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0056) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0057) 	db		ffh
                                        (0058) LoadConfigTBL_jp_exercice5_Bank1:
                                        (0059) ;  Instance name Counter16, User Module Counter16
                                        (0060) ;       Instance name Counter16, Block Name CNTR16_LSB(DBB00)
                                        (0061) 	db		20h, 01h		;Counter16_FUNC_LSB_REG(DBB00FN)
                                        (0062) 	db		21h, d1h		;Counter16_INPUT_LSB_REG(DBB00IN)
                                        (0063) 	db		22h, 40h		;Counter16_OUTPUT_LSB_REG(DBB00OU)
                                        (0064) ;       Instance name Counter16, Block Name CNTR16_MSB(DBB01)
                                        (0065) 	db		24h, 21h		;Counter16_FUNC_MSB_REG(DBB01FN)
                                        (0066) 	db		25h, 31h		;Counter16_INPUT_MSB_REG(DBB01IN)
                                        (0067) 	db		26h, 40h		;Counter16_OUTPUT_MSB_REG(DBB01OU)
                                        (0068) ;  Instance name LCD, User Module LCD
                                        (0069) ;  Instance name P0_SHADOW, User Module SHADOWREGS
                                        (0070) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0071) ;  Global Register values Bank 1
                                        (0072) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0073) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0074) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0075) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0076) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0077) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0078) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0079) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0080) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0081) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0082) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0083) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0084) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0085) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0086) 	db		dfh, 17h		; OscillatorControl_3 register (OSC_CR3)
                                        (0087) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0088) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0089) 	db		ffh
                                        (0090) AREA psoc_config(rom, rel)
                                        (0091) LoadConfigTBL_jp_exercice5_Ordered:
                                        (0092) ;  Ordered Global Register values
                                        (0093) 	M8C_SetBank0
01B8: 62 00 00 MOV   REG[0x0],0x0       (0094) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01BB: 71 10    OR    F,0x10             
                                        (0095) 	M8C_SetBank1
01BD: 62 00 01 MOV   REG[0x0],0x1       (0096) 	mov	reg[00h], 01h		; Port_0_DriveMode_0 register (PRT0DM0)
01C0: 62 01 FE MOV   REG[0x1],0xFE      (0097) 	mov	reg[01h], feh		; Port_0_DriveMode_1 register (PRT0DM1)
01C3: 70 EF    AND   F,0xEF             
                                        (0098) 	M8C_SetBank0
01C5: 62 03 FC MOV   REG[0x3],0xFC      (0099) 	mov	reg[03h], fch		; Port_0_DriveMode_2 register (PRT0DM2)
01C8: 62 02 02 MOV   REG[0x2],0x2       (0100) 	mov	reg[02h], 02h		; Port_0_GlobalSelect register (PRT0GS)
01CB: 71 10    OR    F,0x10             
                                        (0101) 	M8C_SetBank1
01CD: 62 02 02 MOV   REG[0x2],0x2       (0102) 	mov	reg[02h], 02h		; Port_0_IntCtrl_0 register (PRT0IC0)
01D0: 62 03 00 MOV   REG[0x3],0x0       (0103) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01D3: 70 EF    AND   F,0xEF             
                                        (0104) 	M8C_SetBank0
01D5: 62 01 02 MOV   REG[0x1],0x2       (0105) 	mov	reg[01h], 02h		; Port_0_IntEn register (PRT0IE)
01D8: 62 04 00 MOV   REG[0x4],0x0       (0106) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01DB: 71 10    OR    F,0x10             
                                        (0107) 	M8C_SetBank1
01DD: 62 04 00 MOV   REG[0x4],0x0       (0108) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
01E0: 62 05 FF MOV   REG[0x5],0xFF      (0109) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
01E3: 70 EF    AND   F,0xEF             
                                        (0110) 	M8C_SetBank0
01E5: 62 07 FF MOV   REG[0x7],0xFF      (0111) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
01E8: 62 06 00 MOV   REG[0x6],0x0       (0112) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
01EB: 71 10    OR    F,0x10             
                                        (0113) 	M8C_SetBank1
01ED: 62 06 00 MOV   REG[0x6],0x0       (0114) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
01F0: 62 07 00 MOV   REG[0x7],0x0       (0115) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
01F3: 70 EF    AND   F,0xEF             
                                        (0116) 	M8C_SetBank0
01F5: 62 05 00 MOV   REG[0x5],0x0       (0117) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
01F8: 62 08 00 MOV   REG[0x8],0x0       (0118) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
01FB: 71 10    OR    F,0x10             
                                        (0119) 	M8C_SetBank1
01FD: 62 08 7F MOV   REG[0x8],0x7F      (0120) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0200: 62 09 80 MOV   REG[0x9],0x80      (0121) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0203: 70 EF    AND   F,0xEF             
                                        (0122) 	M8C_SetBank0
0205: 62 0B 80 MOV   REG[0xB],0x80      (0123) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0208: 62 0A 00 MOV   REG[0xA],0x0       (0124) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
020B: 71 10    OR    F,0x10             
                                        (0125) 	M8C_SetBank1
020D: 62 0A 00 MOV   REG[0xA],0x0       (0126) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0210: 62 0B 00 MOV   REG[0xB],0x0       (0127) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0213: 70 EF    AND   F,0xEF             
                                        (0128) 	M8C_SetBank0
0215: 62 09 00 MOV   REG[0x9],0x0       (0129) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0218: 62 0C 00 MOV   REG[0xC],0x0       (0130) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
021B: 71 10    OR    F,0x10             
                                        (0131) 	M8C_SetBank1
021D: 62 0C 00 MOV   REG[0xC],0x0       (0132) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0220: 62 0D 00 MOV   REG[0xD],0x0       (0133) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0223: 70 EF    AND   F,0xEF             
                                        (0134) 	M8C_SetBank0
0225: 62 0F 00 MOV   REG[0xF],0x0       (0135) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0228: 62 0E 00 MOV   REG[0xE],0x0       (0136) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
022B: 71 10    OR    F,0x10             
                                        (0137) 	M8C_SetBank1
022D: 62 0E 00 MOV   REG[0xE],0x0       (0138) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0230: 62 0F 00 MOV   REG[0xF],0x0       (0139) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0233: 70 EF    AND   F,0xEF             
                                        (0140) 	M8C_SetBank0
0235: 62 0D 00 MOV   REG[0xD],0x0       (0141) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0238: 62 10 00 MOV   REG[0x10],0x0      (0142) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
023B: 71 10    OR    F,0x10             
                                        (0143) 	M8C_SetBank1
023D: 62 10 00 MOV   REG[0x10],0x0      (0144) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0240: 62 11 00 MOV   REG[0x11],0x0      (0145) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0243: 70 EF    AND   F,0xEF             
                                        (0146) 	M8C_SetBank0
0245: 62 13 00 MOV   REG[0x13],0x0      (0147) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0248: 62 12 00 MOV   REG[0x12],0x0      (0148) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
024B: 71 10    OR    F,0x10             
                                        (0149) 	M8C_SetBank1
024D: 62 12 00 MOV   REG[0x12],0x0      (0150) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0250: 62 13 00 MOV   REG[0x13],0x0      (0151) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0253: 70 EF    AND   F,0xEF             
                                        (0152) 	M8C_SetBank0
0255: 62 11 00 MOV   REG[0x11],0x0      (0153) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0258: 62 14 00 MOV   REG[0x14],0x0      (0154) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
025B: 71 10    OR    F,0x10             
                                        (0155) 	M8C_SetBank1
025D: 62 14 00 MOV   REG[0x14],0x0      (0156) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0260: 62 15 00 MOV   REG[0x15],0x0      (0157) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0263: 70 EF    AND   F,0xEF             
                                        (0158) 	M8C_SetBank0
0265: 62 17 00 MOV   REG[0x17],0x0      (0159) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0268: 62 16 00 MOV   REG[0x16],0x0      (0160) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
026B: 71 10    OR    F,0x10             
                                        (0161) 	M8C_SetBank1
026D: 62 16 00 MOV   REG[0x16],0x0      (0162) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0270: 62 17 00 MOV   REG[0x17],0x0      (0163) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0273: 70 EF    AND   F,0xEF             
                                        (0164) 	M8C_SetBank0
0275: 62 15 00 MOV   REG[0x15],0x0      (0165) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0278: 70 EF    AND   F,0xEF             
                                        (0166) 	M8C_SetBank0
027A: 7F       RET                      (0167) 	ret
                                        (0168) 
                                        (0169) 
                                        (0170) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_jp_exercice5
                                        (0026) export _LoadConfig_jp_exercice5
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
027B: 55 12 00 MOV   [0x12],0x0         (0067) 	mov		[Port_0_Data_SHADE], 0h
027E: 55 13 00 MOV   [0x13],0x0         (0068) 	mov		[Port_2_Data_SHADE], 0h
0281: 55 14 7F MOV   [0x14],0x7F        (0069) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0284: 55 15 80 MOV   [0x15],0x80        (0070) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0071) 
0287: 7C 02 8E LCALL 0x028E             (0072) 	lcall	LoadConfig_jp_exercice5
028A: 7C 01 B6 LCALL 0x01B6             (0073) 	lcall	LoadConfigTBL_jp_exercice5_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
028D: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration jp_exercice5
                                        (0081) ;
                                        (0082) ;    Load configuration registers for jp_exercice5.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_jp_exercice5:
                                        (0099)  LoadConfig_jp_exercice5:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
028E: 10       PUSH  X                  (0102) 	push	x
028F: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
0291: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
0293: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
0294: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_jp_exercice5_Bank0
0296: 57 50    MOV   X,0x50             (0108)     mov     X, <LoadConfigTBL_jp_exercice5_Bank0
0298: 7C 02 A9 LCALL 0x02A9             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
029B: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
029D: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
029E: 50 01    MOV   A,0x1              (0114)     mov     A, >LoadConfigTBL_jp_exercice5_Bank1
02A0: 57 87    MOV   X,0x87             (0115)     mov     X, <LoadConfigTBL_jp_exercice5_Bank1
02A2: 7C 02 A9 LCALL 0x02A9             (0116)     lcall   LoadConfig              ; Load the bank 1 values
02A5: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
02A7: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
02A8: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
02A9: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
02AB: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
02AC: 08       PUSH  A                  (0146)     push    A
02AD: 4F       MOV   X,SP               (0147)     mov     X, SP
02AE: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
02B1: D0 04    JNC   0x02B6             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02B3: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
02B6: 18       POP   A                  (0152)     pop     A
02B7: 20       POP   X                  (0153)     pop     X
02B8: 70 EF    AND   F,0xEF             
02BA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02BD: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
02BE: 08       PUSH  A                  (0159)     push    A
02BF: 28       ROMX                     (0160)     romx                            ; Load register address from table
02C0: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
02C2: A0 1F    JZ    0x02E2             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
02C4: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
02C5: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
02C8: A0 03    JZ    0x02CC             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02CA: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
02CC: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
02CE: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
02CF: 20       POP   X                  (0170)     pop     X
02D0: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
02D1: 09 00    ADC   A,0x0              (0172)     adc     A, 0
02D3: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
02D4: 08       PUSH  A                  (0174)     push    A
02D5: 28       ROMX                     (0175)     romx                            ; load config data from the table
02D6: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
02D7: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
02D9: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
02DB: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
02DC: 20       POP   X                  (0180)     pop     X
02DD: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
02DE: 09 00    ADC   A,0x0              (0182)     adc     A, 0
02E0: 8F D7    JMP   0x02B8             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
02E2: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
02E4: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_0_Data_SHADE:
                                        (0195) Port_0_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\sleeptimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimerINT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_fTick
                                        (0024) export _SleepTimer_fTick
                                        (0025) export  SleepTimer_bTimerValue
                                        (0026) export _SleepTimer_bTimerValue
                                        (0027) export  SleepTimer_bCountDown
                                        (0028) export _SleepTimer_bCountDown
                                        (0029) export  SleepTimer_TickCount
                                        (0030) export _SleepTimer_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_fTick:
                                        (0038) _SleepTimer_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_bTimerValue:
                                        (0041) _SleepTimer_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_bCountDown:
                                        (0044) _SleepTimer_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_TickCount:
                                        (0047) _SleepTimer_TickCount:    BLK  SleepTimer_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_ISR:
                                        (0090) 
02E5: 2E 0B 01 OR    [0xB],0x1          (0091)    or   [SleepTimer_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
02E8: 47 0D FF TST   [0xD],0xFF         (0094)    tst  [SleepTimer_bCountDown],0xFF
02EB: A0 03    JZ    0x02EF             (0095)    jz   .DoTimer
02ED: 7A 0D    DEC   [0xD]              (0096)    dec  [SleepTimer_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
02EF: 47 0C FF TST   [0xC],0xFF         (0099)    tst  [SleepTimer_bTimerValue],0xFF
02F2: A0 03    JZ    0x02F6             (0100)    jz   .IncBigCounter
02F4: 7A 0C    DEC   [0xC]              (0101)    dec  [SleepTimer_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_TICK_CNTR_SIZE & 0x04)
02F6: 76 11    INC   [0x11]             (0105)    inc  [SleepTimer_TickCount+3]
02F8: D0 0B    JNC   0x0304             (0106)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0107) 
02FA: 76 10    INC   [0x10]             (0108)    inc  [SleepTimer_TickCount+2]
02FC: D0 07    JNC   0x0304             (0109)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_TICK_CNTR_SIZE & (0x04|0x02))
02FE: 76 0F    INC   [0xF]              (0113)    inc  [SleepTimer_TickCount+1]
0300: D0 03    JNC   0x0304             (0114)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
0302: 76 0E    INC   [0xE]              (0117)    inc  [SleepTimer_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
0304: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimerINT.asm
                                        (0150) 
FILE: lib\sleeptimer.asm                (0001) ;;*****************************************************************************
0305: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_EnableInt
                                        (0041) export _SleepTimer_EnableInt
                                        (0042) export  SleepTimer_DisableInt
                                        (0043) export _SleepTimer_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_Start
                                        (0046) export _SleepTimer_Start
                                        (0047) export  SleepTimer_Stop
                                        (0048) export _SleepTimer_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_TickWait
                                        (0051) export _SleepTimer_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_SyncWait
                                        (0054) export _SleepTimer_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_SetInterval
                                        (0057) export _SleepTimer_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_bGetTickCntr
                                        (0060) export _SleepTimer_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_SetTimer
                                        (0063) export _SleepTimer_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_bGetTimer
                                        (0066) export _SleepTimer_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_iGetTickCntr
                                        (0070) export _SleepTimer_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_lGetTickCntr
                                        (0075) export _SleepTimer_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_EnableInt:
                                        (0131) _SleepTimer_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
0308: 7F       RET                      (0135)    ret
0309: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_DisableInt:
                                        (0160) _SleepTimer_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
030C: 7F       RET                      (0164)    ret
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_Start:
                                        (0195) _SleepTimer_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_fTick      
030D: 50 00    MOV   A,0x0              (0198)    mov  A,0
030F: 53 0B    MOV   [0xB],A            (0199)    mov  [SleepTimer_fTick],A
0311: 53 0C    MOV   [0xC],A            (0200)    mov  [SleepTimer_bTimerValue],A
0313: 53 0D    MOV   [0xD],A            (0201)    mov  [SleepTimer_bCountDown],A
0315: 53 11    MOV   [0x11],A           (0202)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
0317: 53 10    MOV   [0x10],A           (0204)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_TICK_CNTR_SIZE & 4)
0319: 53 0F    MOV   [0xF],A            (0209)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
031B: 53 0E    MOV   [0xE],A            (0210)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
031D: 7F       RET                      (0215)    ret
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_Stop:
                                        (0240) _SleepTimer_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
031E: 7F       RET                      (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_SetInterval:
                                        (0267) _SleepTimer_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
031F: 21 18    AND   A,0x18             (0269)    and  A,SleepTimer_CLOCK_MASK               ; Mask off invalid data
0321: 4F       MOV   X,SP               (0270)    mov  X, SP
0322: 08       PUSH  A                  (0271)    push A
0323: 71 10    OR    F,0x10             
                                        (0272)    M8C_SetBank1
0325: 5D E0    MOV   A,REG[0xE0]        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
0327: 21 E7    AND   A,0xE7             (0274)    and  A,~SleepTimer_CLOCK_MASK   ; Zero out old timer value
0329: 2B 00    OR    A,[X+0]            (0275)    or   A, [X]                           ; Set new timer values
032B: 60 E0    MOV   REG[0xE0],A        (0276)    mov  reg[OSC_CR0],A                   ; Write it
032D: 70 EF    AND   F,0xEF             
                                        (0277)    M8C_SetBank0
032F: 18       POP   A                  (0278)    pop  A
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
0330: 7F       RET                      (0280)    ret
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_TickWait:
                                        (0312) _SleepTimer_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_fTick      
0331: 55 0B 00 MOV   [0xB],0x0          (0315)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
0334: 47 0B FF TST   [0xB],0xFF         (0318)    tst   [SleepTimer_fTick],0xFF          ; Check for tick 
0337: AF FC    JZ    0x0334             (0319)    jz    .WaitTick
0339: 55 0B 00 MOV   [0xB],0x0          (0320)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
033C: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
033D: BF F6    JNZ   0x0334             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
033F: 7F       RET                      (0325)    ret
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_SyncWait:
                                        (0363) _SleepTimer_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_bCountDown
0340: 4B       SWAP  A,X                (0366)    swap  A,X
0341: 21 01    AND   A,0x1              (0367)    AND   A,SleepTimer_FORCE_RELOAD
0343: B0 06    JNZ   0x034A             (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
0345: 47 0D FF TST   [0xD],0xFF         (0371)    tst   [SleepTimer_bCountDown],0xFF
0348: BF FC    JNZ   0x0345             (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
034A: 4B       SWAP  A,X                (0376)    swap  A,X
034B: 53 0D    MOV   [0xD],A            (0377)    mov   [SleepTimer_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
034D: 7F       RET                      (0380)    ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_bGetTickCntr:
                                        (0413) _SleepTimer_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_TickCount
034E: 51 11    MOV   A,[0x11]           (0416)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
0350: 7F       RET                      (0418)    ret
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_SetTimer:
                                        (0449) _SleepTimer_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_TickCount
0351: 53 0C    MOV   [0xC],A            (0452)    mov   [SleepTimer_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
0353: 7F       RET                      (0454)    ret
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_bGetTimer:
                                        (0485) _SleepTimer_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_TickCount
0354: 51 0C    MOV   A,[0xC]            (0488)    mov   A,[SleepTimer_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
0356: 7F       RET                      (0490)    ret
0357: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_iGetTickCntr:
                                        (0524) _SleepTimer_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
035A: 51 11    MOV   A,[0x11]           (0529)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
035C: 58 10    MOV   X,[0x10]           (0530)    mov   X,[SleepTimer_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
035E: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0531)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
0361: 7F       RET                      (0533)    ret
0362: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_lGetTickCntr:
                                        (0566) _SleepTimer_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
0365: 08       PUSH  A                  (0573)    push  A
0366: 51 0E    MOV   A,[0xE]            (0574)    mov   A,[SleepTimer_TickCount + 0]
0368: 54 00    MOV   [X+0],A            (0575)    mov   [X + 0],A
036A: 51 0F    MOV   A,[0xF]            (0576)    mov   A,[SleepTimer_TickCount + 1]
036C: 54 01    MOV   [X+1],A            (0577)    mov   [X + 1],A
036E: 51 10    MOV   A,[0x10]           (0578)    mov   A,[SleepTimer_TickCount + 2]
0370: 54 02    MOV   [X+2],A            (0579)    mov   [X + 2],A
0372: 51 11    MOV   A,[0x11]           (0580)    mov   A,[SleepTimer_TickCount + 3]
0374: 54 03    MOV   [X+3],A            (0581)    mov   [X + 3],A
0376: 18       POP   A                  (0582)    pop   A
0377: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
037A: 7F       RET                      (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
037B: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
037C: 10       PUSH  X                  (0209)     push  X
037D: 28       ROMX                     (0210)     romx                               ; Get character from ROM
037E: B0 04    JNZ   0x0383             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0380: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0381: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0382: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0383: 90 3C    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
0385: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0386: 18       POP   A                  (0220)     pop   A
0387: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0388: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
038A: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
038B: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
039D: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
039E: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
039F: 67       ASR   A                  (0262)     asr   A
03A0: 67       ASR   A                  (0263)     asr   A
03A1: 67       ASR   A                  (0264)     asr   A
03A2: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
03A4: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
03A6: 90 19    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
03A8: 18       POP   A                  (0268)     pop   A                            ; Restore value
03A9: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
03AB: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
03AD: 90 12    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
03AF: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
03B0: 4B       SWAP  A,X                (0305)     swap  A,X
03B1: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
03B3: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
03B4: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
03B6: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
03B7: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
03B9: A0 06    JZ    0x03C0             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
03BB: 90 04    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
03BD: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
03BE: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
03C0: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
03C1: 90 5F    CALL  0x0422             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
03C3: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
03C4: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
03C5: 67       ASR   A                  (0390)     asr   A
03C6: 67       ASR   A                  (0391)     asr   A
03C7: 67       ASR   A                  (0392)     asr   A
03C8: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
03CA: 90 38    CALL  0x0404             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
03CC: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
03CD: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
03CF: 40       NOP                      (0397)     nop
03D0: 40       NOP                      (0398)     nop
03D1: 40       NOP                      (0399)     nop
03D2: 90 30    CALL  0x0404             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
03D4: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
03D5: 90 4B    CALL  0x0422             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
03D7: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
03D8: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
03D9: 67       ASR   A                  (0436)     asr   A
03DA: 67       ASR   A                  (0437)     asr   A
03DB: 67       ASR   A                  (0438)     asr   A
03DC: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
03DE: 90 09    CALL  0x03E9             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
03E0: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
03E1: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
03E3: 40       NOP                      (0443)     nop
03E4: 40       NOP                      (0444)     nop
03E5: 40       NOP                      (0445)     nop
03E6: 90 01    CALL  0x03E9             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
03E8: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
03E9: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
03EA: 26 13 80 AND   [0x13],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
03ED: 51 13    MOV   A,[0x13]           (0480)     mov   A,[Port_2_Data_SHADE]
03EF: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
03F1: 18       POP   A                  (0483)     pop   A
03F2: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
03F4: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
03F6: 2A 13    OR    A,[0x13]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
03F8: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
03FA: 53 13    MOV   [0x13],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
03FC: 40       NOP                      (0489)     nop
03FD: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
03FF: 53 13    MOV   [0x13],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0401: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0403: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0404: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0405: 26 13 80 AND   [0x13],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0408: 2E 13 20 OR    [0x13],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
040B: 51 13    MOV   A,[0x13]           (0527)     mov   A,[Port_2_Data_SHADE]
040D: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
040F: 18       POP   A                  (0530)     pop   A
0410: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0412: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0414: 2A 13    OR    A,[0x13]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0416: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0418: 53 13    MOV   [0x13],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
041A: 40       NOP                      (0536)     NOP
041B: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
041D: 53 13    MOV   [0x13],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
041F: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0421: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0422: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0423: 26 13 80 AND   [0x13],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0426: 51 13    MOV   A,[0x13]           (0574)     mov   A,[Port_2_Data_SHADE]
0428: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
042A: 26 14 F0 AND   [0x14],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
042D: 51 14    MOV   A,[0x14]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
042F: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0431: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0433: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0435: 2E 13 40 OR    [0x13],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0438: 51 13    MOV   A,[0x13]           (0584)     mov   A,[Port_2_Data_SHADE]
043A: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
043C: 40       NOP                      (0586)     NOP
                                        (0587) 
043D: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
043E: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0440: 2E 13 50 OR    [0x13],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0443: 51 13    MOV   A,[0x13]           (0593)     mov   A,[Port_2_Data_SHADE]
0445: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0447: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0448: 40       NOP                      (0597)     nop
0449: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
044B: 08       PUSH  A                  (0610)     push  A
044C: 26 13 C0 AND   [0x13],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
044F: 51 13    MOV   A,[0x13]           (0612)     mov   A,[Port_2_Data_SHADE]
0451: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0453: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0454: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0455: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0456: 2E 13 50 OR    [0x13],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0459: 51 13    MOV   A,[0x13]           (0620)     mov   A,[Port_2_Data_SHADE]
045B: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
045D: 40       NOP                      (0623)     nop
045E: 40       NOP                      (0624)     nop
                                        (0625) 
045F: 26 13 C0 AND   [0x13],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0462: 51 13    MOV   A,[0x13]           (0627)     mov   A,[Port_2_Data_SHADE]
0464: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0466: 18       POP   A                  (0630)     pop   A
0467: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0469: A0 04    JZ    0x046E             (0633)     jz    .UNLOCK
046B: 79       DEC   X                  (0634)     dec   X
046C: BF D3    JNZ   0x0440             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
046E: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
046F: 2E 14 7F OR    [0x14],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0472: 51 14    MOV   A,[0x14]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0474: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0476: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0478: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
047A: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
047B: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
047C: 26 14 80 AND   [0x14],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
047F: 2E 14 7F OR    [0x14],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0482: 26 15 80 AND   [0x15],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0485: 51 14    MOV   A,[0x14]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0487: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0489: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
048B: 51 15    MOV   A,[0x15]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
048D: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
048F: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0491: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0493: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0495: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0497: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0499: 50 03    MOV   A,0x3              (0701)     mov   A,03h
049B: 9F 4C    CALL  0x03E9             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
049D: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
049F: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
04A1: 50 03    MOV   A,0x3              (0707)     mov   A,03h
04A3: 9F 44    CALL  0x03E9             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
04A5: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
04A7: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
04A9: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
04AB: 50 03    MOV   A,0x3              (0714)     mov   A,03h
04AD: 9F 3A    CALL  0x03E9             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
04AF: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04B1: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
04B3: 50 02    MOV   A,0x2              (0720)     mov   A,02h
04B5: 9F 32    CALL  0x03E9             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
04B7: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04B9: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
04BB: 50 08    MOV   A,0x8              (0726)     mov   A,08h
04BD: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
04BF: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04C1: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
04C3: 50 01    MOV   A,0x1              (0731)     mov   A,01h
04C5: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
04C7: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04C9: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
04CB: 50 06    MOV   A,0x6              (0736)     mov   A,06h
04CD: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
04CF: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
04D1: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
04D3: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
04D5: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
04D7: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
04D9: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
04DB: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
04DD: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
04DF: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
04E1: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
04E3: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04E5: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
04E7: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
04EC: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
04EE: 10       PUSH  X                  (0791)     push  X                            ; Store COL
04EF: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
04F1: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
04F2: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
04F4: 20       POP   X                  (0795)     pop   X
                                        (0796) 
04F5: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
04F7: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
04F8: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
04FA: 78       DEC   A                  (0828)     dec   A
04FB: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
04FD: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0506: 08       PUSH  A                  (0871)     push  A
0507: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0509: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
050B: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
050D: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
050F: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0511: D0 06    JNC   0x0518             (0877)     jnc   .Delay50u_End
0513: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0515: 78       DEC   A                  (0880)     dec   A                              ; [4]
0516: BF FE    JNZ   0x0515             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0518: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0519: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
051A: 10       PUSH  X                  (0943)     push  X
051B: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
051D: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
051F: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
0520: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
0523: B0 05    JNZ   0x0529             (0950)     jnz   .LCD_CHECK1X
0525: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
0527: 80 11    JMP   0x0539             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0529: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
052C: D0 07    JNC   0x0534             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
052E: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
0530: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
0532: 80 06    JMP   0x0539             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
0534: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
0536: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0539: 9E 86    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
053B: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
053D: BF E2    JNZ   0x0520             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
053F: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0540: 4F       MOV   X,SP               (1015)     mov   X, SP
0541: 10       PUSH  X                  (1016)     push  X
0542: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0544: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0546: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0548: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0549: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
054C: B0 05    JNZ   0x0552             (1026)     jnz   .LCD_CHECK1
054E: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0550: 80 11    JMP   0x0562             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0552: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0555: D0 07    JNC   0x055D             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0557: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0559: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
055B: 80 06    JMP   0x0562             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
055D: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
055F: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0562: 9E 5D    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
0564: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0566: BF E2    JNZ   0x0549             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0568: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
0569: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
056B: 08       PUSH  A                  (1098)     push  A
056C: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
056E: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
0570: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
0572: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
0575: B0 05    JNZ   0x057B             (1103)     jnz   .VBG_NZ_SEGX
0577: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
0579: 80 13    JMP   0x058D             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
057B: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
057E: D0 09    JNC   0x0588             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
0580: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
0582: 78       DEC   A                  (1111)     dec   A
0583: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
0586: 80 06    JMP   0x058D             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
0588: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
058B: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
058D: 9E 32    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(1120)     call  LCD_WriteData                ; Write value
058F: 18       POP   A                  (1121)     pop   A
0590: 78       DEC   A                  (1122)     dec   A
0591: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
0593: BF D7    JNZ   0x056B             (1124)     jnz   .VBG_LOOPX
0595: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
0596: 4F       MOV   X,SP               (1168)     mov   X, SP
0597: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0599: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
059B: 08       PUSH  A                  (1172)     push  A
059C: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
059E: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
05A0: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
05A2: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
05A5: B0 05    JNZ   0x05AB             (1177)     jnz   .VBG_NZ_SEG
05A7: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
05A9: 80 13    JMP   0x05BD             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
05AB: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
05AE: D0 09    JNC   0x05B8             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
05B0: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
05B2: 78       DEC   A                  (1185)     dec   A
05B3: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
05B6: 80 06    JMP   0x05BD             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
05B8: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
05BB: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
05BD: 9E 02    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
05BF: 18       POP   A                  (1195)     pop   A
05C0: 78       DEC   A                  (1196)     dec   A
05C1: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
05C3: BF D7    JNZ   0x059B             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
05C5: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
05C6: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
05C7: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
05C8: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
05C9: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
05CB: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
05CD: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
05D0: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
05D3: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
05D5: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
05D7: D0 05    JNC   0x05DD             (1251)     jnc   .VBG_SOLID
05D9: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
05DB: 80 03    JMP   0x05DF             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
05DD: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
05DF: 9D E0    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(1257)     call  LCD_WriteData                ; character data
05E1: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
05E3: BF EF    JNZ   0x05D3             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
05E5: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
05E7: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
05EA: BF E5    JNZ   0x05D0             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
05EC: 18       POP   A                  (1264)     pop  A
05ED: 18       POP   A                  (1265)     pop  A
05EE: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
05F0: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
05F2: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0601: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0602: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0604: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0606: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0608: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
060A: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
060D: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0610: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0612: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0615: B0 05    JNZ   0x061B             (1332)     jnz   .BG_OTHER
0617: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0619: 80 03    JMP   0x061D             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
061B: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
061D: 9D A2    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(1338)     call  LCD_WriteData
061F: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0621: BF EE    JNZ   0x0610             (1340)     jnz   .BG_Loop2
0623: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0625: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0628: BF E4    JNZ   0x060D             (1343)     jnz   .BG_Loop1
                                        (1344) 
062A: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
062C: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
062E: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0630: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\counter16int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter16.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0631: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter16INT.asm
FILE: lib\counter16.asm                 (0001) ;;*****************************************************************************
0632: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter16_EnableInt
                                        (0030) export _Counter16_EnableInt
                                        (0031) export  Counter16_DisableInt
                                        (0032) export _Counter16_DisableInt
                                        (0033) export  Counter16_Start
                                        (0034) export _Counter16_Start
                                        (0035) export  Counter16_Stop
                                        (0036) export _Counter16_Stop
                                        (0037) export  Counter16_WritePeriod
                                        (0038) export _Counter16_WritePeriod
                                        (0039) export  Counter16_WriteCompareValue
                                        (0040) export _Counter16_WriteCompareValue
                                        (0041) export  Counter16_wReadCompareValue
                                        (0042) export _Counter16_wReadCompareValue
                                        (0043) export  Counter16_wReadCounter
                                        (0044) export _Counter16_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wCounter16_ReadCompareValue  ; deprecated
                                        (0049) export _wCounter16_ReadCompareValue  ; deprecated
                                        (0050) export  wCounter16_ReadCounter       ; deprecated
                                        (0051) export _wCounter16_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter16_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter16_EnableInt:
                                        (0082) _Counter16_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter16_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0635: 7F       RET                      (0086)    ret
0636: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter16_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter16_DisableInt:
                                        (0109) _Counter16_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter16_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0639: 7F       RET                      (0113)    ret
063A: 43 23 01 OR    REG[0x23],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter16_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter16_Start:
                                        (0138) _Counter16_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter16_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
063D: 7F       RET                      (0142)    ret
063E: 41 23 FE AND   REG[0x23],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter16_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter16_Stop:
                                        (0166) _Counter16_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter16_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0641: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter16_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter16_WritePeriod:
                                        (0196) _Counter16_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0642: 60 21    MOV   REG[0x21],A        (0198)    mov   reg[Counter16_PERIOD_LSB_REG], A
0644: 5B       MOV   A,X                (0199)    mov   A, X
0645: 60 25    MOV   REG[0x25],A        (0200)    mov   reg[Counter16_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
0647: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: Counter16_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  Counter16_WriteCompareValue:
                                        (0225) _Counter16_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
0648: 60 22    MOV   REG[0x22],A        (0227)    mov   reg[Counter16_COMPARE_LSB_REG], A
064A: 5B       MOV   A,X                (0228)    mov   A, X
064B: 60 26    MOV   REG[0x26],A        (0229)    mov   reg[Counter16_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
064D: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: Counter16_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  Counter16_wReadCompareValue:
                                        (0254) _Counter16_wReadCompareValue:
                                        (0255)  wCounter16_ReadCompareValue:                    ; this name deprecated
                                        (0256) _wCounter16_ReadCompareValue:                    ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
064E: 5D 26    MOV   A,REG[0x26]        (0258)    mov   A, reg[Counter16_COMPARE_MSB_REG]
0650: 5C       MOV   X,A                (0259)    mov   X, A
0651: 5D 22    MOV   A,REG[0x22]        (0260)    mov   A, reg[Counter16_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
0653: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: Counter16_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  Counter16_wReadCounter:
                                        (0289) _Counter16_wReadCounter:
                                        (0290)  wCounter16_ReadCounter:                         ; this name deprecated
                                        (0291) _wCounter16_ReadCounter:                         ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
0654: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
0655: 5D 26    MOV   A,REG[0x26]        (0301)    mov   A, reg[Counter16_COMPARE_MSB_REG]       ; Save the Compare register on the stack
0657: 08       PUSH  A                  (0302)    push  A                                          ;
0658: 5D 22    MOV   A,REG[0x22]        (0303)    mov   A, reg[Counter16_COMPARE_LSB_REG]       ;
065A: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
065B: 5D 23    MOV   A,REG[0x23]        (0305)    mov   A, reg[Counter16_CONTROL_LSB_REG]       ; Save CR0 (running or stopped state)
065D: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
065E: 41 23 FE AND   REG[0x23],0xFE     
0661: 71 10    OR    F,0x10             
                                        (0307)    Counter16_Stop_M                              ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
0663: 5D 21    MOV   A,REG[0x21]        (0309)    mov   A, reg[Counter16_INPUT_LSB_REG]         ; save the LSB clock input setting
0665: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
0666: 62 21 00 MOV   REG[0x21],0x0      (0312)    mov   reg[Counter16_INPUT_LSB_REG], INPUT_REG_NULL
0669: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
066B: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[Counter16_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
066D: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[Counter16_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
066F: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
0670: 5D 20    MOV   A,REG[0x20]        (0317)    mov   A, reg[Counter16_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0672: 5D 22    MOV   A,REG[0x22]        (0318)    mov   A, reg[Counter16_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0674: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0675: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0677: 60 26    MOV   REG[0x26],A        (0321)    mov   reg[Counter16_COMPARE_MSB_REG], A       ;
0679: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
067B: 60 22    MOV   REG[0x22],A        (0323)    mov   reg[Counter16_COMPARE_LSB_REG], A       ;
067D: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
067F: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0681: 60 21    MOV   REG[0x21],A        (0326)    mov   reg[Counter16_INPUT_LSB_REG], A         ;   and restore it
0683: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0685: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0687: 60 23    MOV   REG[0x23],A        (0329)    mov   reg[Counter16_CONTROL_LSB_REG], A       ;   this function was first called
0689: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
068A: 20       POP   X                  (0331)    pop   X                                          ;
068B: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
068D: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File Counter16.asm
FILE: .\main.asm                        (0001) ;-----------------------------------------------------------------------------
                                        (0002) ; Assembly main line
                                        (0003) ;-----------------------------------------------------------------------------
                                        (0004) 
                                        (0005) include "m8c.inc"       ; part specific constants and macros
                                        (0006) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0007) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0008) 
                                        (0009) export _main
                                        (0010) 
                                        (0011) area bss (ram, rel )
                                        (0012) counter_buffer: blk 2
                                        (0013) int_flag:: blk 1
                                        (0014) string: blk 10
                                        (0015) float_result: blk 4
                                        (0016) area text(rom, rel )
                                        (0017) 
                                        (0018) .LITERAL 
                                        (0019) BLANK:
                                        (0020) 	asciz "     "
                                        (0021) 
                                        (0022) .ENDLITERAL 
                                        (0023) _main:
                                        (0024) 
0694: 43 01 02 OR    REG[0x1],0x2       (0025) 	or reg[Echo_IntEn_ADDR], Echo_MASK
0697: 43 E0 20 OR    REG[0xE0],0x20     
069A: 71 01    OR    F,0x1              
                                        (0026) 	M8C_EnableIntMask INT_MSK0, INT_MSK0_GPIO
                                        (0027) 	
                                        (0028)     M8C_EnableGInt ; Enable Global Interrupts	
                                        (0029) 	
069C: 7C 04 7C LCALL LCD_Init|_LCD_Start|LCD_Start|_LCD_Init(0030) 	lcall LCD_Start
069F: 7C 03 05 LCALL _SleepTimer_EnableInt(0031) 	lcall SleepTimer_EnableInt
06A2: 7C 03 0D LCALL _SleepTimer_Start  (0032) 	lcall SleepTimer_Start
                                        (0033) 
06A5: 55 18 00 MOV   [int_flag],0x0     (0034) 	mov [int_flag], 0
06A8: 7C 06 3A LCALL _Counter16_Start   (0035) 	lcall Counter16_Start
                                        (0036) 	
                                        (0037) .loop:
                                        (0038) ; Set SleepTimer
06AB: 50 01    MOV   A,0x1              (0039) 	mov A, 1
06AD: 7C 03 51 LCALL _SleepTimer_SetTimer(0040) 	lcall SleepTimer_SetTimer		; Set Sleep Timer to count 1 sec
06B0: 2E 12 01 OR    [0x12],0x1         
06B3: 51 12    MOV   A,[0x12]           
06B5: 60 00    MOV   REG[0x0],A         
                                        (0041) 
                                        (0042) 
                                        (0043) 	
                                        (0044) ; Send Trigger signal on P0.0 (high 11us)
                                        (0045) 	SetTrigger_Data
06B7: 40       NOP                      (0046) 	nop
06B8: 40       NOP                      (0047) 	nop
06B9: 40       NOP                      (0048) 	nop
06BA: 40       NOP                      (0049) 	nop
06BB: 40       NOP                      (0050) 	nop
06BC: 40       NOP                      (0051) 	nop
06BD: 26 12 FE AND   [0x12],0xFE        
06C0: 51 12    MOV   A,[0x12]           
06C2: 60 00    MOV   REG[0x0],A         
                                        (0052) 	ClearTrigger_Data
                                        (0053) 	
                                        (0054) 
                                        (0055) .poll_counter:
06C4: 3C 18 00 CMP   [int_flag],0x0     (0056) 	cmp [int_flag], 0
06C7: AF FC    JZ    0x06C4             (0057) 	jz .poll_counter
                                        (0058) 	
06C9: 7C 06 54 LCALL Counter16_wReadCounter|wCounter16_ReadCounter|_Counter16_wReadCounter|_wCounter16_ReadCounter(0059) 	lcall Counter16_wReadCounter
06CC: 5A 16    MOV   [0x16],X           (0060) 	mov [counter_buffer], X
06CE: 53 17    MOV   [0x17],A           (0061) 	mov [counter_buffer+1], A
                                        (0062) 	
06D0: 50 FF    MOV   A,0xFF             (0063) 	mov A, 0xFF
06D2: 12 17    SUB   A,[0x17]           (0064) 	sub A, [counter_buffer+1]
06D4: 53 17    MOV   [0x17],A           (0065) 	mov [counter_buffer+1], A
06D6: 50 FF    MOV   A,0xFF             (0066) 	mov A, 0xFF
06D8: 1A 16    SBB   A,[0x16]           (0067) 	sbb A, [counter_buffer]
06DA: 53 16    MOV   [0x16],A           (0068) 	mov [counter_buffer], A
                                        (0069) 
06DC: 50 00    MOV   A,0x0              (0070) 	mov A, 0
06DE: 57 00    MOV   X,0x0              (0071) 	mov X, 0
06E0: 7C 04 EC LCALL _LCD_Position      (0072) 	lcall LCD_Position
                                        (0073) 
                                        (0074) ; fp ops
06E3: 50 00    MOV   A,0x0              (0075) 	mov A, 0		; Push result address at current sp + 2
06E5: 08       PUSH  A                  (0076) 	push A			; MSByte = 0
06E6: 4F       MOV   X,SP               (0077) 	mov X, SP
06E7: 75       INC   X                  (0078) 	inc X			; LSByte = SP+1
06E8: 10       PUSH  X                  (0079) 	push X
06E9: 38 04    ADD   SP,0x4             (0080) 	add SP, 4		; Allocate 4 bytes for results
                                        (0081) 
                                        (0082) ;---- FP Convert 
06EB: 50 00    MOV   A,0x0              (0083) 	mov A, 0
06ED: 08       PUSH  A                  (0084) 	push A 			; FP convert result address
06EE: 10       PUSH  X                  (0085) 	push X			
06EF: 08       PUSH  A                  (0086) 	push A			; parameter 2 most significant bytes = 0
06F0: 08       PUSH  A                  (0087) 	push A
06F1: 51 16    MOV   A,[0x16]           (0088) 	mov A, [counter_buffer]	; Push counter value on stack
06F3: 08       PUSH  A                  (0089) 	push A
06F4: 51 17    MOV   A,[0x17]           (0090) 	mov A, [counter_buffer+1]
06F6: 08       PUSH  A                  (0091) 	push A
06F7: 7C 0B 04 LCALL 0x0B04             (0092) 	lcall _ulong2fp	; convert to float
06FA: 38 FA    ADD   SP,0xFA            (0093) 	add SP, -6		; pop stack
                                        (0094) 	
                                        (0095) ;---- FP Add with Intercept ---- (-19.3826)
06FC: 50 C1    MOV   A,0xC1             (0096) 	mov A, 0xc1
06FE: 08       PUSH  A                  (0097) 	push A
06FF: 50 9B    MOV   A,0x9B             (0098) 	mov A, 0x9b
0701: 08       PUSH  A                  (0099) 	push A
0702: 50 0F    MOV   A,0xF              (0100) 	mov A, 0x0f
0704: 08       PUSH  A                  (0101) 	push A
0705: 50 91    MOV   A,0x91             (0102) 	mov A, 0x91
0707: 08       PUSH  A                  (0103) 	push A
0708: 7C 08 23 LCALL 0x0823             (0104) 	lcall _fpadd
070B: 38 FC    ADD   SP,0xFC            (0105) 	add SP, -4
                                        (0106) 	
                                        (0107) ;---- FP Mult with "slope" ---- 0.173768... (1/57.(...) * 10 to get mm value)
070D: 50 3E    MOV   A,0x3E             (0108) 	mov A, 0x3e
070F: 08       PUSH  A                  (0109) 	push A
0710: 50 31    MOV   A,0x31             (0110) 	mov A, 0x31
0712: 08       PUSH  A                  (0111) 	push A
0713: 50 F0    MOV   A,0xF0             (0112) 	mov A, 0xf0
0715: 08       PUSH  A                  (0113) 	push A
0716: 50 3D    MOV   A,0x3D             (0114) 	mov A, 0x3d
0718: 08       PUSH  A                  (0115) 	push A
0719: 7C 09 67 LCALL 0x0967             (0116) 	lcall _fpmul
071C: 38 FC    ADD   SP,0xFC            (0117) 	add SP, -4
                                        (0118) 
                                        (0119) 
071E: 4F       MOV   X,SP               (0120) 	mov X, SP
071F: 56 FB 16 MOV   [X-5],0x16         (0121) 	mov [x-5], counter_buffer 
                                        (0122) 
0722: 7C 0D 65 LCALL _ftoa              (0123) 	lcall _ftoa
0725: 38 FA    ADD   SP,0xFA            (0124) 	add SP, -6
                                        (0125) 	
0727: 50 00    MOV   A,0x0              (0126) 	mov A, 0
0729: 58 09    MOV   X,[__r1]           (0127) 	mov X, [__r1]
072B: 7C 03 B7 LCALL _LCD_PrString      (0128) 	lcall LCD_PrString
                                        (0129) 	
072E: 50 06    MOV   A,0x6              (0130) 	mov A, >BLANK
0730: 57 8E    MOV   X,0x8E             (0131) 	mov X, <BLANK
0732: 7C 03 7B LCALL _LCD_PrCString     (0132) 	lcall LCD_PrCString
                                        (0133) 
0735: 7C 06 3E LCALL _Counter16_Stop    (0134) 	lcall Counter16_Stop
0738: 57 FF    MOV   X,0xFF             (0135) 	mov X, 0xFF
073A: 50 FF    MOV   A,0xFF             (0136) 	mov A, 0xFF
073C: 7C 06 42 LCALL _Counter16_WritePeriod(0137) 	lcall Counter16_WritePeriod
073F: 7C 06 3A LCALL _Counter16_Start   (0138) 	lcall Counter16_Start
0742: 55 18 00 MOV   [int_flag],0x0     (0139) 	mov [int_flag], 0
                                        (0140) 	
                                        (0141) .sleep_delay:
0745: 7C 03 54 LCALL _SleepTimer_bGetTimer(0142) 	lcall SleepTimer_bGetTimer	; Get the Sleep Timer count
0748: 39 00    CMP   A,0x0              (0143) 	cmp A, 0	    			; Check if it expired
074A: BF FA    JNZ   0x0745             (0144) 	jnz .sleep_delay			; loop until timer expired
                                        (0145) 
074C: 8F 5E    JMP   0x06AB             (0146) 	jmp .loop
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
074E: 76 18    INC   [int_flag]         (0059) 	inc [int_flag]
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
0750: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
_ltoa:
    0B5C: 10       PUSH  X
    0B5D: 4F       MOV   X,SP
    0B5E: 38 0B    ADD   SP,0xB
    0B60: 52 F7    MOV   A,[X-9]
    0B62: 54 02    MOV   [X+2],A
    0B64: 52 F8    MOV   A,[X-8]
    0B66: 54 03    MOV   [X+3],A
    0B68: 52 F9    MOV   A,[X-7]
    0B6A: 54 04    MOV   [X+4],A
    0B6C: 52 FA    MOV   A,[X-6]
    0B6E: 54 05    MOV   [X+5],A
    0B70: 3D F7 00 CMP   [X-9],0x0
    0B73: B0 2C    JNZ   0x0BA0
    0B75: 3D F8 00 CMP   [X-8],0x0
    0B78: B0 27    JNZ   0x0BA0
    0B7A: 3D F9 00 CMP   [X-7],0x0
    0B7D: B0 22    JNZ   0x0BA0
    0B7F: 3D FA 00 CMP   [X-6],0x0
    0B82: B0 1D    JNZ   0x0BA0
    0B84: 52 FC    MOV   A,[X-4]
    0B86: 53 09    MOV   [__r1],A
    0B88: 50 30    MOV   A,0x30
    0B8A: 3F 09    MVI   [__r1],A
    0B8C: 52 FC    MOV   A,[X-4]
    0B8E: 01 01    ADD   A,0x1
    0B90: 53 09    MOV   [__r1],A
    0B92: 50 00    MOV   A,0x0
    0B94: 3F 09    MVI   [__r1],A
    0B96: 52 FC    MOV   A,[X-4]
    0B98: 53 09    MOV   [__r1],A
    0B9A: 52 FB    MOV   A,[X-5]
    0B9C: 53 0A    MOV   [__r0],A
    0B9E: 81 C2    JMP   0x0D61
    0BA0: 52 FA    MOV   A,[X-6]
    0BA2: 11 00    SUB   A,0x0
    0BA4: 52 F9    MOV   A,[X-7]
    0BA6: 19 00    SBB   A,0x0
    0BA8: 52 F8    MOV   A,[X-8]
    0BAA: 19 00    SBB   A,0x0
    0BAC: 52 F7    MOV   A,[X-9]
    0BAE: 31 80    XOR   A,0x80
    0BB0: 19 80    SBB   A,0x80
    0BB2: D0 38    JNC   0x0BEB
    0BB4: 3D F5 00 CMP   [X-11],0x0
    0BB7: B0 33    JNZ   0x0BEB
    0BB9: 3D F6 0A CMP   [X-10],0xA
    0BBC: B0 2E    JNZ   0x0BEB
    0BBE: 56 08 01 MOV   [X+8],0x1
    0BC1: 52 02    MOV   A,[X+2]
    0BC3: 73       CPL   A
    0BC4: 53 0A    MOV   [__r0],A
    0BC6: 52 03    MOV   A,[X+3]
    0BC8: 73       CPL   A
    0BC9: 53 09    MOV   [__r1],A
    0BCB: 52 04    MOV   A,[X+4]
    0BCD: 73       CPL   A
    0BCE: 53 08    MOV   [__r2],A
    0BD0: 52 05    MOV   A,[X+5]
    0BD2: 73       CPL   A
    0BD3: 01 01    ADD   A,0x1
    0BD5: 54 05    MOV   [X+5],A
    0BD7: 51 08    MOV   A,[__r2]
    0BD9: 09 00    ADC   A,0x0
    0BDB: 54 04    MOV   [X+4],A
    0BDD: 51 09    MOV   A,[__r1]
    0BDF: 09 00    ADC   A,0x0
    0BE1: 54 03    MOV   [X+3],A
    0BE3: 51 0A    MOV   A,[__r0]
    0BE5: 09 00    ADC   A,0x0
    0BE7: 54 02    MOV   [X+2],A
    0BE9: 80 04    JMP   0x0BEE
    0BEB: 56 08 00 MOV   [X+8],0x0
    0BEE: 52 FC    MOV   A,[X-4]
    0BF0: 54 01    MOV   [X+1],A
    0BF2: 52 F6    MOV   A,[X-10]
    0BF4: 53 07    MOV   [__r3],A
    0BF6: 52 F5    MOV   A,[X-11]
    0BF8: 53 08    MOV   [__r2],A
    0BFA: 47 08 80 TST   [__r2],0x80
    0BFD: A0 09    JZ    0x0C07
    0BFF: 55 09 FF MOV   [__r1],0xFF
    0C02: 55 0A FF MOV   [__r0],0xFF
    0C05: 80 07    JMP   0x0C0D
    0C07: 55 09 00 MOV   [__r1],0x0
    0C0A: 55 0A 00 MOV   [__r0],0x0
    0C0D: 51 0A    MOV   A,[__r0]
    0C0F: 08       PUSH  A
    0C10: 51 09    MOV   A,[__r1]
    0C12: 08       PUSH  A
    0C13: 51 08    MOV   A,[__r2]
    0C15: 08       PUSH  A
    0C16: 51 07    MOV   A,[__r3]
    0C18: 08       PUSH  A
    0C19: 52 02    MOV   A,[X+2]
    0C1B: 08       PUSH  A
    0C1C: 52 03    MOV   A,[X+3]
    0C1E: 08       PUSH  A
    0C1F: 52 04    MOV   A,[X+4]
    0C21: 08       PUSH  A
    0C22: 52 05    MOV   A,[X+5]
    0C24: 08       PUSH  A
    0C25: 7C 07 51 LCALL 0x0751
    0C28: 38 FC    ADD   SP,0xFC
    0C2A: 18       POP   A
    0C2B: 53 07    MOV   [__r3],A
    0C2D: 18       POP   A
    0C2E: 53 08    MOV   [__r2],A
    0C30: 18       POP   A
    0C31: 18       POP   A
    0C32: 51 07    MOV   A,[__r3]
    0C34: 54 0A    MOV   [X+10],A
    0C36: 51 08    MOV   A,[__r2]
    0C38: 54 09    MOV   [X+9],A
    0C3A: 50 09    MOV   A,0x9
    0C3C: 13 0A    SUB   A,[X+10]
    0C3E: 52 09    MOV   A,[X+9]
    0C40: 31 80    XOR   A,0x80
    0C42: 53 02    MOV   [__rX],A
    0C44: 50 80    MOV   A,0x80
    0C46: 1A 02    SBB   A,[__rX]
    0C48: C0 1D    JC    0x0C66
    0C4A: 52 01    MOV   A,[X+1]
    0C4C: 53 09    MOV   [__r1],A
    0C4E: 52 00    MOV   A,[X+0]
    0C50: 53 0A    MOV   [__r0],A
    0C52: 51 09    MOV   A,[__r1]
    0C54: 01 01    ADD   A,0x1
    0C56: 54 01    MOV   [X+1],A
    0C58: 51 0A    MOV   A,[__r0]
    0C5A: 09 00    ADC   A,0x0
    0C5C: 54 00    MOV   [X+0],A
    0C5E: 52 0A    MOV   A,[X+10]
    0C60: 01 30    ADD   A,0x30
    0C62: 3F 09    MVI   [__r1],A
    0C64: 80 1B    JMP   0x0C80
    0C66: 52 01    MOV   A,[X+1]
    0C68: 53 09    MOV   [__r1],A
    0C6A: 52 00    MOV   A,[X+0]
    0C6C: 53 0A    MOV   [__r0],A
    0C6E: 51 09    MOV   A,[__r1]
    0C70: 01 01    ADD   A,0x1
    0C72: 54 01    MOV   [X+1],A
    0C74: 51 0A    MOV   A,[__r0]
    0C76: 09 00    ADC   A,0x0
    0C78: 54 00    MOV   [X+0],A
    0C7A: 52 0A    MOV   A,[X+10]
    0C7C: 01 57    ADD   A,0x57
    0C7E: 3F 09    MVI   [__r1],A
    0C80: 52 F6    MOV   A,[X-10]
    0C82: 53 07    MOV   [__r3],A
    0C84: 52 F5    MOV   A,[X-11]
    0C86: 53 08    MOV   [__r2],A
    0C88: 47 08 80 TST   [__r2],0x80
    0C8B: A0 09    JZ    0x0C95
    0C8D: 55 09 FF MOV   [__r1],0xFF
    0C90: 55 0A FF MOV   [__r0],0xFF
    0C93: 80 07    JMP   0x0C9B
    0C95: 55 09 00 MOV   [__r1],0x0
    0C98: 55 0A 00 MOV   [__r0],0x0
    0C9B: 51 0A    MOV   A,[__r0]
    0C9D: 08       PUSH  A
    0C9E: 51 09    MOV   A,[__r1]
    0CA0: 08       PUSH  A
    0CA1: 51 08    MOV   A,[__r2]
    0CA3: 08       PUSH  A
    0CA4: 51 07    MOV   A,[__r3]
    0CA6: 08       PUSH  A
    0CA7: 52 02    MOV   A,[X+2]
    0CA9: 08       PUSH  A
    0CAA: 52 03    MOV   A,[X+3]
    0CAC: 08       PUSH  A
    0CAD: 52 04    MOV   A,[X+4]
    0CAF: 08       PUSH  A
    0CB0: 52 05    MOV   A,[X+5]
    0CB2: 08       PUSH  A
    0CB3: 7C 07 51 LCALL 0x0751
    0CB6: 18       POP   A
    0CB7: 54 05    MOV   [X+5],A
    0CB9: 18       POP   A
    0CBA: 54 04    MOV   [X+4],A
    0CBC: 18       POP   A
    0CBD: 54 03    MOV   [X+3],A
    0CBF: 18       POP   A
    0CC0: 54 02    MOV   [X+2],A
    0CC2: 38 FC    ADD   SP,0xFC
    0CC4: 3D 02 00 CMP   [X+2],0x0
    0CC7: BF 2A    JNZ   0x0BF2
    0CC9: 3D 03 00 CMP   [X+3],0x0
    0CCC: BF 25    JNZ   0x0BF2
    0CCE: 3D 04 00 CMP   [X+4],0x0
    0CD1: BF 20    JNZ   0x0BF2
    0CD3: 3D 05 00 CMP   [X+5],0x0
    0CD6: BF 1B    JNZ   0x0BF2
    0CD8: 3D 08 00 CMP   [X+8],0x0
    0CDB: A0 19    JZ    0x0CF5
    0CDD: 52 01    MOV   A,[X+1]
    0CDF: 53 09    MOV   [__r1],A
    0CE1: 52 00    MOV   A,[X+0]
    0CE3: 53 0A    MOV   [__r0],A
    0CE5: 51 09    MOV   A,[__r1]
    0CE7: 01 01    ADD   A,0x1
    0CE9: 54 01    MOV   [X+1],A
    0CEB: 51 0A    MOV   A,[__r0]
    0CED: 09 00    ADC   A,0x0
    0CEF: 54 00    MOV   [X+0],A
    0CF1: 50 2D    MOV   A,0x2D
    0CF3: 3F 09    MVI   [__r1],A
    0CF5: 52 01    MOV   A,[X+1]
    0CF7: 53 09    MOV   [__r1],A
    0CF9: 52 00    MOV   A,[X+0]
    0CFB: 53 0A    MOV   [__r0],A
    0CFD: 51 09    MOV   A,[__r1]
    0CFF: 01 FF    ADD   A,0xFF
    0D01: 54 01    MOV   [X+1],A
    0D03: 51 0A    MOV   A,[__r0]
    0D05: 09 FF    ADC   A,0xFF
    0D07: 54 00    MOV   [X+0],A
    0D09: 50 00    MOV   A,0x0
    0D0B: 3F 09    MVI   [__r1],A
    0D0D: 52 FC    MOV   A,[X-4]
    0D0F: 54 07    MOV   [X+7],A
    0D11: 80 3D    JMP   0x0D4F
    0D13: 52 07    MOV   A,[X+7]
    0D15: 53 09    MOV   [__r1],A
    0D17: 3E 09    MVI   A,[__r1]
    0D19: 54 08    MOV   [X+8],A
    0D1B: 52 07    MOV   A,[X+7]
    0D1D: 53 09    MOV   [__r1],A
    0D1F: 52 06    MOV   A,[X+6]
    0D21: 53 0A    MOV   [__r0],A
    0D23: 51 09    MOV   A,[__r1]
    0D25: 01 01    ADD   A,0x1
    0D27: 54 07    MOV   [X+7],A
    0D29: 51 0A    MOV   A,[__r0]
    0D2B: 09 00    ADC   A,0x0
    0D2D: 54 06    MOV   [X+6],A
    0D2F: 52 01    MOV   A,[X+1]
    0D31: 53 07    MOV   [__r3],A
    0D33: 3E 07    MVI   A,[__r3]
    0D35: 3F 09    MVI   [__r1],A
    0D37: 52 01    MOV   A,[X+1]
    0D39: 53 09    MOV   [__r1],A
    0D3B: 52 00    MOV   A,[X+0]
    0D3D: 53 0A    MOV   [__r0],A
    0D3F: 51 09    MOV   A,[__r1]
    0D41: 01 FF    ADD   A,0xFF
    0D43: 54 01    MOV   [X+1],A
    0D45: 51 0A    MOV   A,[__r0]
    0D47: 09 FF    ADC   A,0xFF
    0D49: 54 00    MOV   [X+0],A
    0D4B: 52 08    MOV   A,[X+8]
    0D4D: 3F 09    MVI   [__r1],A
    0D4F: 52 01    MOV   A,[X+1]
    0D51: 53 0A    MOV   [__r0],A
    0D53: 52 07    MOV   A,[X+7]
    0D55: 3A 0A    CMP   A,[__r0]
    0D57: CF BB    JC    0x0D13
    0D59: 52 FC    MOV   A,[X-4]
    0D5B: 53 09    MOV   [__r1],A
    0D5D: 52 FB    MOV   A,[X-5]
    0D5F: 53 0A    MOV   [__r0],A
    0D61: 38 F5    ADD   SP,0xF5
    0D63: 20       POP   X
    0D64: 7F       RET   
_ftoa:
    0D65: 10       PUSH  X
    0D66: 4F       MOV   X,SP
    0D67: 38 16    ADD   SP,0x16
    0D69: 52 F8    MOV   A,[X-8]
    0D6B: 53 09    MOV   [__r1],A
    0D6D: 50 00    MOV   A,0x0
    0D6F: 3F 09    MVI   [__r1],A
    0D71: 3F 09    MVI   [__r1],A
    0D73: 08       PUSH  A
    0D74: 08       PUSH  A
    0D75: 08       PUSH  A
    0D76: 08       PUSH  A
    0D77: 52 F9    MOV   A,[X-7]
    0D79: 08       PUSH  A
    0D7A: 52 FA    MOV   A,[X-6]
    0D7C: 08       PUSH  A
    0D7D: 52 FB    MOV   A,[X-5]
    0D7F: 08       PUSH  A
    0D80: 52 FC    MOV   A,[X-4]
    0D82: 08       PUSH  A
    0D83: 7C 09 19 LCALL 0x0919
    0D86: 38 F8    ADD   SP,0xF8
    0D88: 39 00    CMP   A,0x0
    0D8A: B0 15    JNZ   0x0DA0
    0D8C: 55 27 30 MOV   [int_flag+15],0x30
    0D8F: 55 28 2E MOV   [int_flag+16],0x2E
    0D92: 55 29 30 MOV   [int_flag+17],0x30
    0D95: 55 2A 00 MOV   [int_flag+18],0x0
    0D98: 55 09 27 MOV   [__r1],0x27
    0D9B: 55 0A 00 MOV   [__r0],0x0
    0D9E: 83 66    JMP   0x1105
    0DA0: 52 F9    MOV   A,[X-7]
    0DA2: 54 06    MOV   [X+6],A
    0DA4: 52 FA    MOV   A,[X-6]
    0DA6: 54 07    MOV   [X+7],A
    0DA8: 52 FB    MOV   A,[X-5]
    0DAA: 54 08    MOV   [X+8],A
    0DAC: 52 FC    MOV   A,[X-4]
    0DAE: 54 09    MOV   [X+9],A
    0DB0: 52 06    MOV   A,[X+6]
    0DB2: 53 0A    MOV   [__r0],A
    0DB4: 52 07    MOV   A,[X+7]
    0DB6: 53 09    MOV   [__r1],A
    0DB8: 52 08    MOV   A,[X+8]
    0DBA: 53 08    MOV   [__r2],A
    0DBC: 52 09    MOV   A,[X+9]
    0DBE: 53 07    MOV   [__r3],A
    0DC0: 50 17    MOV   A,0x17
    0DC2: 68 0A    ASR   [__r0]
    0DC4: 6E 09    RRC   [__r1]
    0DC6: 6E 08    RRC   [__r2]
    0DC8: 6E 07    RRC   [__r3]
    0DCA: 78       DEC   A
    0DCB: BF F6    JNZ   0x0DC2
    0DCD: 51 07    MOV   A,[__r3]
    0DCF: 11 7F    SUB   A,0x7F
    0DD1: 54 0B    MOV   [X+11],A
    0DD3: 50 00    MOV   A,0x0
    0DD5: 19 00    SBB   A,0x0
    0DD7: 54 0A    MOV   [X+10],A
    0DD9: 52 09    MOV   A,[X+9]
    0DDB: 53 07    MOV   [__r3],A
    0DDD: 52 08    MOV   A,[X+8]
    0DDF: 53 08    MOV   [__r2],A
    0DE1: 52 07    MOV   A,[X+7]
    0DE3: 53 09    MOV   [__r1],A
    0DE5: 51 07    MOV   A,[__r3]
    0DE7: 54 13    MOV   [X+19],A
    0DE9: 51 08    MOV   A,[__r2]
    0DEB: 54 12    MOV   [X+18],A
    0DED: 51 09    MOV   A,[__r1]
    0DEF: 29 80    OR    A,0x80
    0DF1: 54 11    MOV   [X+17],A
    0DF3: 56 10 00 MOV   [X+16],0x0
    0DF6: 56 02 00 MOV   [X+2],0x0
    0DF9: 56 03 00 MOV   [X+3],0x0
    0DFC: 56 04 00 MOV   [X+4],0x0
    0DFF: 56 05 00 MOV   [X+5],0x0
    0E02: 56 0C 00 MOV   [X+12],0x0
    0E05: 56 0D 00 MOV   [X+13],0x0
    0E08: 56 0E 00 MOV   [X+14],0x0
    0E0B: 56 0F 00 MOV   [X+15],0x0
    0E0E: 52 0B    MOV   A,[X+11]
    0E10: 11 1F    SUB   A,0x1F
    0E12: 52 0A    MOV   A,[X+10]
    0E14: 31 80    XOR   A,0x80
    0E16: 19 80    SBB   A,0x80
    0E18: C0 15    JC    0x0E2E
    0E1A: 52 F8    MOV   A,[X-8]
    0E1C: 53 09    MOV   [__r1],A
    0E1E: 50 FF    MOV   A,0xFF
    0E20: 3F 09    MVI   [__r1],A
    0E22: 50 FE    MOV   A,0xFE
    0E24: 3F 09    MVI   [__r1],A
    0E26: 55 09 00 MOV   [__r1],0x0
    0E29: 55 0A 00 MOV   [__r0],0x0
    0E2C: 82 D8    JMP   0x1105
    0E2E: 52 0B    MOV   A,[X+11]
    0E30: 11 E9    SUB   A,0xE9
    0E32: 52 0A    MOV   A,[X+10]
    0E34: 31 80    XOR   A,0x80
    0E36: 19 7F    SBB   A,0x7F
    0E38: D0 13    JNC   0x0E4C
    0E3A: 52 F8    MOV   A,[X-8]
    0E3C: 53 09    MOV   [__r1],A
    0E3E: 50 FF    MOV   A,0xFF
    0E40: 3F 09    MVI   [__r1],A
    0E42: 3F 09    MVI   [__r1],A
    0E44: 55 09 00 MOV   [__r1],0x0
    0E47: 55 0A 00 MOV   [__r0],0x0
    0E4A: 82 BA    JMP   0x1105
    0E4C: 52 0B    MOV   A,[X+11]
    0E4E: 11 17    SUB   A,0x17
    0E50: 52 0A    MOV   A,[X+10]
    0E52: 31 80    XOR   A,0x80
    0E54: 19 80    SBB   A,0x80
    0E56: C0 3A    JC    0x0E91
    0E58: 52 0B    MOV   A,[X+11]
    0E5A: 11 17    SUB   A,0x17
    0E5C: 53 09    MOV   [__r1],A
    0E5E: 52 10    MOV   A,[X+16]
    0E60: 53 06    MOV   [__r4],A
    0E62: 52 11    MOV   A,[X+17]
    0E64: 53 05    MOV   [__r5],A
    0E66: 52 12    MOV   A,[X+18]
    0E68: 53 04    MOV   [__r6],A
    0E6A: 52 13    MOV   A,[X+19]
    0E6C: 53 03    MOV   [__r7],A
    0E6E: 51 09    MOV   A,[__r1]
    0E70: 21 1F    AND   A,0x1F
    0E72: A0 0C    JZ    0x0E7F
    0E74: 65 03    ASL   [__r7]
    0E76: 6B 04    RLC   [__r6]
    0E78: 6B 05    RLC   [__r5]
    0E7A: 6B 06    RLC   [__r4]
    0E7C: 78       DEC   A
    0E7D: BF F6    JNZ   0x0E74
    0E7F: 51 06    MOV   A,[__r4]
    0E81: 54 0C    MOV   [X+12],A
    0E83: 51 05    MOV   A,[__r5]
    0E85: 54 0D    MOV   [X+13],A
    0E87: 51 04    MOV   A,[__r6]
    0E89: 54 0E    MOV   [X+14],A
    0E8B: 51 03    MOV   A,[__r7]
    0E8D: 54 0F    MOV   [X+15],A
    0E8F: 80 B5    JMP   0x0F45
    0E91: 52 0B    MOV   A,[X+11]
    0E93: 11 00    SUB   A,0x0
    0E95: 52 0A    MOV   A,[X+10]
    0E97: 31 80    XOR   A,0x80
    0E99: 19 80    SBB   A,0x80
    0E9B: C0 70    JC    0x0F0C
    0E9D: 50 17    MOV   A,0x17
    0E9F: 13 0B    SUB   A,[X+11]
    0EA1: 53 09    MOV   [__r1],A
    0EA3: 52 10    MOV   A,[X+16]
    0EA5: 53 06    MOV   [__r4],A
    0EA7: 52 11    MOV   A,[X+17]
    0EA9: 53 05    MOV   [__r5],A
    0EAB: 52 12    MOV   A,[X+18]
    0EAD: 53 04    MOV   [__r6],A
    0EAF: 52 13    MOV   A,[X+19]
    0EB1: 53 03    MOV   [__r7],A
    0EB3: 51 09    MOV   A,[__r1]
    0EB5: 21 1F    AND   A,0x1F
    0EB7: A0 0C    JZ    0x0EC4
    0EB9: 68 06    ASR   [__r4]
    0EBB: 6E 05    RRC   [__r5]
    0EBD: 6E 04    RRC   [__r6]
    0EBF: 6E 03    RRC   [__r7]
    0EC1: 78       DEC   A
    0EC2: BF F6    JNZ   0x0EB9
    0EC4: 51 06    MOV   A,[__r4]
    0EC6: 54 0C    MOV   [X+12],A
    0EC8: 51 05    MOV   A,[__r5]
    0ECA: 54 0D    MOV   [X+13],A
    0ECC: 51 04    MOV   A,[__r6]
    0ECE: 54 0E    MOV   [X+14],A
    0ED0: 51 03    MOV   A,[__r7]
    0ED2: 54 0F    MOV   [X+15],A
    0ED4: 52 0B    MOV   A,[X+11]
    0ED6: 01 01    ADD   A,0x1
    0ED8: 53 09    MOV   [__r1],A
    0EDA: 52 10    MOV   A,[X+16]
    0EDC: 53 06    MOV   [__r4],A
    0EDE: 52 11    MOV   A,[X+17]
    0EE0: 53 05    MOV   [__r5],A
    0EE2: 52 12    MOV   A,[X+18]
    0EE4: 53 04    MOV   [__r6],A
    0EE6: 52 13    MOV   A,[X+19]
    0EE8: 53 03    MOV   [__r7],A
    0EEA: 51 09    MOV   A,[__r1]
    0EEC: 21 1F    AND   A,0x1F
    0EEE: A0 0C    JZ    0x0EFB
    0EF0: 65 03    ASL   [__r7]
    0EF2: 6B 04    RLC   [__r6]
    0EF4: 6B 05    RLC   [__r5]
    0EF6: 6B 06    RLC   [__r4]
    0EF8: 78       DEC   A
    0EF9: BF F6    JNZ   0x0EF0
    0EFB: 51 03    MOV   A,[__r7]
    0EFD: 54 05    MOV   [X+5],A
    0EFF: 51 04    MOV   A,[__r6]
    0F01: 54 04    MOV   [X+4],A
    0F03: 51 05    MOV   A,[__r5]
    0F05: 54 03    MOV   [X+3],A
    0F07: 56 02 00 MOV   [X+2],0x0
    0F0A: 80 3A    JMP   0x0F45
    0F0C: 52 0B    MOV   A,[X+11]
    0F0E: 01 01    ADD   A,0x1
    0F10: 73       CPL   A
    0F11: 11 FF    SUB   A,0xFF
    0F13: 53 09    MOV   [__r1],A
    0F15: 52 13    MOV   A,[X+19]
    0F17: 53 03    MOV   [__r7],A
    0F19: 52 12    MOV   A,[X+18]
    0F1B: 53 04    MOV   [__r6],A
    0F1D: 52 11    MOV   A,[X+17]
    0F1F: 53 05    MOV   [__r5],A
    0F21: 55 06 00 MOV   [__r4],0x0
    0F24: 51 09    MOV   A,[__r1]
    0F26: 21 1F    AND   A,0x1F
    0F28: A0 0C    JZ    0x0F35
    0F2A: 68 06    ASR   [__r4]
    0F2C: 6E 05    RRC   [__r5]
    0F2E: 6E 04    RRC   [__r6]
    0F30: 6E 03    RRC   [__r7]
    0F32: 78       DEC   A
    0F33: BF F6    JNZ   0x0F2A
    0F35: 51 06    MOV   A,[__r4]
    0F37: 54 02    MOV   [X+2],A
    0F39: 51 05    MOV   A,[__r5]
    0F3B: 54 03    MOV   [X+3],A
    0F3D: 51 04    MOV   A,[__r6]
    0F3F: 54 04    MOV   [X+4],A
    0F41: 51 03    MOV   A,[__r7]
    0F43: 54 05    MOV   [X+5],A
    0F45: 56 01 27 MOV   [X+1],0x27
    0F48: 56 00 00 MOV   [X+0],0x0
    0F4B: 52 09    MOV   A,[X+9]
    0F4D: 11 00    SUB   A,0x0
    0F4F: 52 08    MOV   A,[X+8]
    0F51: 19 00    SBB   A,0x0
    0F53: 52 07    MOV   A,[X+7]
    0F55: 19 00    SBB   A,0x0
    0F57: 52 06    MOV   A,[X+6]
    0F59: 31 80    XOR   A,0x80
    0F5B: 19 80    SBB   A,0x80
    0F5D: D0 19    JNC   0x0F77
    0F5F: 52 01    MOV   A,[X+1]
    0F61: 53 09    MOV   [__r1],A
    0F63: 52 00    MOV   A,[X+0]
    0F65: 53 0A    MOV   [__r0],A
    0F67: 51 09    MOV   A,[__r1]
    0F69: 01 01    ADD   A,0x1
    0F6B: 54 01    MOV   [X+1],A
    0F6D: 51 0A    MOV   A,[__r0]
    0F6F: 09 00    ADC   A,0x0
    0F71: 54 00    MOV   [X+0],A
    0F73: 50 2D    MOV   A,0x2D
    0F75: 3F 09    MVI   [__r1],A
    0F77: 3D 0C 00 CMP   [X+12],0x0
    0F7A: B0 2A    JNZ   0x0FA5
    0F7C: 3D 0D 00 CMP   [X+13],0x0
    0F7F: B0 25    JNZ   0x0FA5
    0F81: 3D 0E 00 CMP   [X+14],0x0
    0F84: B0 20    JNZ   0x0FA5
    0F86: 3D 0F 00 CMP   [X+15],0x0
    0F89: B0 1B    JNZ   0x0FA5
    0F8B: 52 01    MOV   A,[X+1]
    0F8D: 53 09    MOV   [__r1],A
    0F8F: 52 00    MOV   A,[X+0]
    0F91: 53 0A    MOV   [__r0],A
    0F93: 51 09    MOV   A,[__r1]
    0F95: 01 01    ADD   A,0x1
    0F97: 54 01    MOV   [X+1],A
    0F99: 51 0A    MOV   A,[__r0]
    0F9B: 09 00    ADC   A,0x0
    0F9D: 54 00    MOV   [X+0],A
    0F9F: 50 30    MOV   A,0x30
    0FA1: 3F 09    MVI   [__r1],A
    0FA3: 80 2D    JMP   0x0FD1
    0FA5: 50 00    MOV   A,0x0
    0FA7: 08       PUSH  A
    0FA8: 50 0A    MOV   A,0xA
    0FAA: 08       PUSH  A
    0FAB: 52 0C    MOV   A,[X+12]
    0FAD: 08       PUSH  A
    0FAE: 52 0D    MOV   A,[X+13]
    0FB0: 08       PUSH  A
    0FB1: 52 0E    MOV   A,[X+14]
    0FB3: 08       PUSH  A
    0FB4: 52 0F    MOV   A,[X+15]
    0FB6: 08       PUSH  A
    0FB7: 52 00    MOV   A,[X+0]
    0FB9: 08       PUSH  A
    0FBA: 52 01    MOV   A,[X+1]
    0FBC: 08       PUSH  A
    0FBD: 7C 0B 5C LCALL _ltoa
    0FC0: 38 F8    ADD   SP,0xF8
    0FC2: 80 06    JMP   0x0FC9
    0FC4: 77 01    INC   [X+1]
    0FC6: 0F 00 00 ADC   [X+0],0x0
    0FC9: 52 01    MOV   A,[X+1]
    0FCB: 53 09    MOV   [__r1],A
    0FCD: 3E 09    MVI   A,[__r1]
    0FCF: BF F4    JNZ   0x0FC4
    0FD1: 52 01    MOV   A,[X+1]
    0FD3: 53 09    MOV   [__r1],A
    0FD5: 52 00    MOV   A,[X+0]
    0FD7: 53 0A    MOV   [__r0],A
    0FD9: 51 09    MOV   A,[__r1]
    0FDB: 01 01    ADD   A,0x1
    0FDD: 54 01    MOV   [X+1],A
    0FDF: 51 0A    MOV   A,[__r0]
    0FE1: 09 00    ADC   A,0x0
    0FE3: 54 00    MOV   [X+0],A
    0FE5: 50 2E    MOV   A,0x2E
    0FE7: 3F 09    MVI   [__r1],A
    0FE9: 3D 02 00 CMP   [X+2],0x0
    0FEC: B0 2A    JNZ   0x1017
    0FEE: 3D 03 00 CMP   [X+3],0x0
    0FF1: B0 25    JNZ   0x1017
    0FF3: 3D 04 00 CMP   [X+4],0x0
    0FF6: B0 20    JNZ   0x1017
    0FF8: 3D 05 00 CMP   [X+5],0x0
    0FFB: B0 1B    JNZ   0x1017
    0FFD: 52 01    MOV   A,[X+1]
    0FFF: 53 09    MOV   [__r1],A
    1001: 52 00    MOV   A,[X+0]
    1003: 53 0A    MOV   [__r0],A
    1005: 51 09    MOV   A,[__r1]
    1007: 01 01    ADD   A,0x1
    1009: 54 01    MOV   [X+1],A
    100B: 51 0A    MOV   A,[__r0]
    100D: 09 00    ADC   A,0x0
    100F: 54 00    MOV   [X+0],A
    1011: 50 30    MOV   A,0x30
    1013: 3F 09    MVI   [__r1],A
    1015: 80 E1    JMP   0x10F7
    1017: 55 0A 27 MOV   [__r0],0x27
    101A: 52 01    MOV   A,[X+1]
    101C: 12 0A    SUB   A,[__r0]
    101E: 53 0A    MOV   [__r0],A
    1020: 50 0F    MOV   A,0xF
    1022: 12 0A    SUB   A,[__r0]
    1024: 11 01    SUB   A,0x1
    1026: 54 15    MOV   [X+21],A
    1028: 50 07    MOV   A,0x7
    102A: 3B 15    CMP   A,[X+21]
    102C: D0 04    JNC   0x1031
    102E: 56 15 07 MOV   [X+21],0x7
    1031: 56 14 00 MOV   [X+20],0x0
    1034: 80 93    JMP   0x10C8
    1036: 52 02    MOV   A,[X+2]
    1038: 53 0A    MOV   [__r0],A
    103A: 52 03    MOV   A,[X+3]
    103C: 53 09    MOV   [__r1],A
    103E: 52 04    MOV   A,[X+4]
    1040: 53 08    MOV   [__r2],A
    1042: 52 05    MOV   A,[X+5]
    1044: 64       ASL   A
    1045: 53 07    MOV   [__r3],A
    1047: 6B 08    RLC   [__r2]
    1049: 6B 09    RLC   [__r1]
    104B: 6B 0A    RLC   [__r0]
    104D: 52 02    MOV   A,[X+2]
    104F: 53 06    MOV   [__r4],A
    1051: 52 03    MOV   A,[X+3]
    1053: 53 05    MOV   [__r5],A
    1055: 52 04    MOV   A,[X+4]
    1057: 53 04    MOV   [__r6],A
    1059: 52 05    MOV   A,[X+5]
    105B: 53 03    MOV   [__r7],A
    105D: 50 03    MOV   A,0x3
    105F: 65 03    ASL   [__r7]
    1061: 6B 04    RLC   [__r6]
    1063: 6B 05    RLC   [__r5]
    1065: 6B 06    RLC   [__r4]
    1067: 78       DEC   A
    1068: BF F6    JNZ   0x105F
    106A: 51 03    MOV   A,[__r7]
    106C: 02 07    ADD   A,[__r3]
    106E: 54 05    MOV   [X+5],A
    1070: 51 04    MOV   A,[__r6]
    1072: 0A 08    ADC   A,[__r2]
    1074: 54 04    MOV   [X+4],A
    1076: 51 05    MOV   A,[__r5]
    1078: 0A 09    ADC   A,[__r1]
    107A: 54 03    MOV   [X+3],A
    107C: 51 06    MOV   A,[__r4]
    107E: 0A 0A    ADC   A,[__r0]
    1080: 54 02    MOV   [X+2],A
    1082: 52 01    MOV   A,[X+1]
    1084: 53 09    MOV   [__r1],A
    1086: 52 00    MOV   A,[X+0]
    1088: 53 0A    MOV   [__r0],A
    108A: 51 09    MOV   A,[__r1]
    108C: 01 01    ADD   A,0x1
    108E: 54 01    MOV   [X+1],A
    1090: 51 0A    MOV   A,[__r0]
    1092: 09 00    ADC   A,0x0
    1094: 54 00    MOV   [X+0],A
    1096: 52 02    MOV   A,[X+2]
    1098: 53 06    MOV   [__r4],A
    109A: 52 03    MOV   A,[X+3]
    109C: 53 05    MOV   [__r5],A
    109E: 52 04    MOV   A,[X+4]
    10A0: 53 04    MOV   [__r6],A
    10A2: 52 05    MOV   A,[X+5]
    10A4: 53 03    MOV   [__r7],A
    10A6: 50 18    MOV   A,0x18
    10A8: 68 06    ASR   [__r4]
    10AA: 6E 05    RRC   [__r5]
    10AC: 6E 04    RRC   [__r6]
    10AE: 6E 03    RRC   [__r7]
    10B0: 78       DEC   A
    10B1: BF F6    JNZ   0x10A8
    10B3: 06 03 30 ADD   [__r7],0x30
    10B6: 0E 04 00 ADC   [__r6],0x0
    10B9: 0E 05 00 ADC   [__r5],0x0
    10BC: 0E 06 00 ADC   [__r4],0x0
    10BF: 51 03    MOV   A,[__r7]
    10C1: 3F 09    MVI   [__r1],A
    10C3: 27 02 00 AND   [X+2],0x0
    10C6: 77 14    INC   [X+20]
    10C8: 52 14    MOV   A,[X+20]
    10CA: 3B 15    CMP   A,[X+21]
    10CC: CF 69    JC    0x1036
    10CE: 52 01    MOV   A,[X+1]
    10D0: 01 FF    ADD   A,0xFF
    10D2: 54 01    MOV   [X+1],A
    10D4: 80 07    JMP   0x10DC
    10D6: 52 01    MOV   A,[X+1]
    10D8: 01 FF    ADD   A,0xFF
    10DA: 54 01    MOV   [X+1],A
    10DC: 52 01    MOV   A,[X+1]
    10DE: 53 09    MOV   [__r1],A
    10E0: 3E 09    MVI   A,[__r1]
    10E2: 39 30    CMP   A,0x30
    10E4: B0 0D    JNZ   0x10F2
    10E6: 52 01    MOV   A,[X+1]
    10E8: 01 FF    ADD   A,0xFF
    10EA: 53 09    MOV   [__r1],A
    10EC: 3E 09    MVI   A,[__r1]
    10EE: 39 2E    CMP   A,0x2E
    10F0: BF E5    JNZ   0x10D6
    10F2: 77 01    INC   [X+1]
    10F4: 0F 00 00 ADC   [X+0],0x0
    10F7: 52 01    MOV   A,[X+1]
    10F9: 53 09    MOV   [__r1],A
    10FB: 50 00    MOV   A,0x0
    10FD: 3F 09    MVI   [__r1],A
    10FF: 55 09 27 MOV   [__r1],0x27
    1102: 55 0A 00 MOV   [__r0],0x0
    1105: 38 EA    ADD   SP,0xEA
    1107: 20       POP   X
    1108: 7F       RET   
